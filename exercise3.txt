i) It is possible to declare different methods with the same name but different parameters. This is referred to as
method overloading. Java decides at runtime which method matches the pattern of given parameters.
ii) Method overloading is not associated with return types.
void foo() { ... }
void foo(int a) { ... }
float foo(double a) { ... }
is allowed. However if the name and the parameters are the same, there cannot be a different return value.
void foo() { ... }
int foo() { ... }
is not allowed because Java can not distinguish which method should be called when we try to evoke foo();
iii) As demonstrated in the main method of the TimesTwo class, there is a difference between passing an int or an array
to a method. When passing a primitive (such as int, double or float) a copy is given to the method. Therefore the value
of the original int does not get changed. However when passing an Array (or String) a reference of the actual object
is passed to the method. Therefore changes inside of the method can change the object itself.
Example generated by the TimesTwo class:
Before the Method call:
42
[12, 24, 48, 3]
Method call:
84
[24, 48, 96, 6]
After the Method call:
42
[24, 48, 96, 6]
one can see that the number 42 has not been changed but the Array has been changed.